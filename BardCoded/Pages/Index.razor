@page "/"
@using System.Diagnostics.CodeAnalysis;
@using System.Net;
@using ZXing.Common;
@using ZXing;
@if (loading)
{
    <Spinner Id="image-loader">
        @if (Status.Equals(ScanStatus.Searching))
        {
            <p id="searching-message">Successfully parsed that barcode - looking for it in all the places.</p>
        }
        else if (Status.Equals(ScanStatus.ReadingBarcode))
        {
            <p id="searching-message">Reading that image for a barcode.</p>
        }
        </Spinner>
    return;
}
<div>
    <InputFile OnChange="c=>Changed(c)" AdditionalAttributes="adds" />
</div>
@if (Status.Equals(ScanStatus.BarcodeUnreadable))
{
    <p><span id="errorMsg">I wasn't able to read that barcode. Please retry.</span></p>
}
else if (Result != null)
{
    <div><small>@Result.BarcodeFormat:</small>&nbsp;@Result.Text</div>

    @if (possibleKnown == null)
    {
        <div class="btn-group">
            <a class="btn btn-outline-primary" href="add/@Result.Text">Add To Database</a>
        </div>
    }
    else
    {
        <p>Found that barcode!</p>
        <div>@possibleKnown.Name</div>
        <div>@possibleKnown.Description</div>
        <div class="btn-group">
            <a class="btn btn-outline-primary" href="update/@Result.Text">Update Information</a>
        </div>
    }
    <div class="text-sm-start">
        <hr />
    </div>
}
else if (Error != null)
{
    <Bardcoded.Components.AlertNotification>
        <Header>
            <strong>Ouf! Something didn't go right.</strong>
        </Header>
        <Message>
            @if (Error is ApiErrorResponseException apiError)
            {
                <p>The server reported a '@apiError.StatusCode' for @apiError.Bard</p>
                @if (apiError.Result != null)
                {
                    <p>
                        @apiError.Result.Title - @apiError.Result.Detail
                    </p>
                }
            }
            else
            {
                <p>@Error.Message</p>
            }
        </Message>
    </Bardcoded.Components.AlertNotification>
}
<div class="btn-group">
    <button class="btn btn-outline-warning" type="reset" @onclick="Reset">Reset</button>
</div>


@code {
    [Inject] public IJSRuntime js { get; set; }
    [Inject] public NavigationManager nav { get; set; }
    [Inject] public ApiClient http { get; set; }
    [Parameter] public int Height { get; set; } = 1280;
    [Parameter] public int Width { get; set; } = 1280;
    private BarcodeResult? Result { get; set; } = null;
    private BarcodeView? possibleKnown { get; set; } = null;
    private ScanStatus Status { get; set; } = ScanStatus.WaitingForInput;
    private Dictionary<String, object?> adds = new Dictionary<string, object?>()
    {

        {"accepts", "image/*"},
        {"capture", "environment"}
    };

    private Exception Error { get; set; } = null;
    private bool loading { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loading = false;
            StateHasChanged(); // if firstrender was true for more than one render this would loop possible forever
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async void Reset()
    {
        Result = null;
        possibleKnown = null;
        Status = ScanStatus.WaitingForInput;
        loading = false;
        Error = null;
        StateHasChanged();
    }

    public async void Changed(InputFileChangeEventArgs change)
    {

        if (change.FileCount != 1)
        {
            Error = new ArgumentOutOfRangeException("Only one file at a time.");
            Status = ScanStatus.WaitingForInput;
            StateHasChanged();
            return;
        }

        if (change.FileCount == 0 || change.File == null)
        {
            Error = new ArgumentNullException("Select a file. . .");
            Status = ScanStatus.WaitingForInput;
            StateHasChanged();
            return;
        }

        byte[] bytes = new byte[0];
        Stream stream;
        try
        {
            stream = change.File.OpenReadStream(maxAllowedSize: Height * Width * 4 + 512000);
        }
        catch (System.IO.IOException io)
        {
            if (io.Message.IndexOf("exceeds the maximum of") > 0)
            {
                Error = new InvalidOperationException("That file is far too powerful for me!");
            } else
            {
                Error = io;
            }
            Status = ScanStatus.WaitingForInput;
            StateHasChanged();
            return;
        }
        using (stream)
        {
            if (stream.Length == 0)
            {
                Error = new InvalidOperationException("No 0 size files.");
                Status = ScanStatus.WaitingForInput;
                StateHasChanged();
                return;
            }
            bytes = new byte[stream.Length];
            loading = true;
            StateHasChanged();
            Status = ScanStatus.ReadingBarcode;
            await stream.ReadAsync(bytes, 0, bytes.Length);
            Result = await BarcodeResult.translateAsync(bytes, "image");
        }
        if (Result == null)
        {
            Status = ScanStatus.BarcodeUnreadable;
        }
        else
        {
            Status = ScanStatus.Searching;
            StateHasChanged();
            try
            {
                possibleKnown = await http.GetItem(Result.Text);

            }
            catch (ApiErrorResponseException apiError)
            {
                Error = apiError;
                Console.WriteLine($"Api reported error: {apiError.StatusCode}");
                possibleKnown = null;
            }
            catch (Exception e)
            {
                possibleKnown = null;
                Console.WriteLine(e);
                Error = e;
            }
        }
        loading = false;
        StateHasChanged();
    }

    private enum ScanStatus
    {
        WaitingForInput,
        ReadingBarcode,
        BarcodeUnreadable,
        Searching,

    }
}
