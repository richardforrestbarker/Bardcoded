# ### Define variables
#
variables:
  # 1) Name of directory where restore and build objects are stored.
  OBJECTS_DIRECTORY: 'obj'
  # 2) Name of directory used for keeping restored dependencies.
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  # 3) A relative path to the source code from project repository root.
  # NOTE: Please edit this path so it matches the structure of your project!
  SOURCE_CODE_PATH: 'Barcoded/'

  SSH_DEPLOY_TARGET_HOST: 'user@192.168.1.101'
  SSH_DEPLOY_TARGET_ROOT_DIR: '/home/user/Bardcoded'

# ### Define global cache rule
#
# Before building the project, all dependencies (e.g. third-party NuGet packages)
# must be restored. Jobs on GitLab.com's Shared Runners are executed on autoscaled machines.
#
# Each machine is used only once (for security reasons) and after that is removed.
# This means that, before every job, a dependency restore must be performed
# because restored dependencies are removed along with machines. Fortunately,
# GitLab provides cache mechanism with the aim of keeping restored dependencies
# for other jobs.
#
# This example shows how to configure cache to pass over restored
# dependencies for re-use.
#
# With global cache rule, cached dependencies will be downloaded before every job
# and then unpacked to the paths as specified below.
cache:
  # Per-stage and per-branch caching.
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    # Specify three paths that should be cached:
    #
    # 1) Main JSON file holding information about package dependency tree, packages versions,
    # frameworks etc. It also holds information where to the dependencies were restored.
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    # 2) Other NuGet and MSBuild related files. Also needed.
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    # 3) Path to the directory where restored dependencies are kept.
    - '$NUGET_PACKAGES_DIRECTORY'
  #
  # 'pull-push' policy means that latest cache will be downloaded (if it exists)
  # before executing the job, and a newer version will be uploaded afterwards.
  # Such a setting saves time when there are no changes in referenced third-party
  # packages.
  #
  # For example, if you run a pipeline with changes in your code,
  # but with no changes within third-party packages which your project is using,
  # then project restore will happen quickly as all required dependencies
  # will already be there â€” unzipped from cache.

  # 'pull-push' policy is the default cache policy, you do not have to specify it explicitly.
  policy: pull-push

# ### Restore project dependencies
#
# NuGet packages by default are restored to '.nuget/packages' directory
# in the user's home directory. That directory is out of scope of GitLab caching.
#
# To get around this, a custom path can be specified using the '--packages <PATH>' option
# for 'dotnet restore' command. In this example, a temporary directory is created
# in the root of project repository, so its content can be cached.
#
# Learn more about GitLab cache: https://docs.gitlab.com/ee/ci/caching/index.html
before_script:
  - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'

build:
  stage: build
  script:
    - 'dotnet build --no-restore'

tests:
  stage: test
  # ### Run the tests
  #
  # You can either run tests for all test projects that are defined in your solution
  # with 'dotnet test' or run tests only for specific project by specifying
  # a relative path to the directory where it is located (e.g. 'dotnet test ./test/UnitTests').
  #
  # You may want to define separate testing jobs for different types of testing
  # (e.g. integration tests, unit tests etc).
  script:
    - 'export BC-TEST-DATA="{\r\n  \"fileLocation\": \"\",\r\n  \"expected\": {\r\n    \"testcode-a.txt\": {\r\n      \"Text\": \"360505257898\",\r\n      \"BarcodeFormat\": \"UPC_A\",\r\n      \"ResultMetadata\": {\r\n        \"POSSIBLE_COUNTRY\": \"US\",\r\n        \"SYMBOLOGY_IDENTIFIER\": \"]E0\",\r\n        \"ORIENTATION\": 0\r\n      }\r\n    },\r\n    \"testcode-b.txt\": {\r\n      \"Text\": \"769498031919\",\r\n      \"BarcodeFormat\": \"UPC_A\",\r\n      \"ResultMetadata\": {\r\n        \"POSSIBLE_COUNTRY\": \"US/CA\",\r\n        \"SYMBOLOGY_IDENTIFIER\": \"]E0\",\r\n        \"ORIENTATION\": 0\r\n      }\r\n    }\r\n  }\r\n}"'
    - 'dotnet test --no-restore'

deploy:
  stage: deploy
  needs: ["test", "build"]
  script: 
   - ssh $SSH_DEPLOY_TARGET_HOST 'export GREEN_DIR=/home/user/bardcoded/green'
   - ssh $SSH_DEPLOY_TARGET_HOST 'export BLUE_DIR=/home/user/bardcoded/blue'
   - ssh $SSH_DEPLOY_TARGET_HOST 'rm -rf $GREEN_DIR/*'
   - dotnet publish --configuration Release --output $SOURCE_CODE_PATH/publish;
   - tar cf - $SOURCE_CODE_PATH/publish && ssh $SSH_DEPLOY_TARGET_HOST 'tar xfC - $GREEN_DIR'

   ## later we'll flip it to blue


  environment: production
  